// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: krake/v1/krake.proto

package krakev1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/krake-labs/krake/gen/krake/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KrakeBrokerServiceName is the fully-qualified name of the KrakeBrokerService service.
	KrakeBrokerServiceName = "krake.v1.KrakeBrokerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KrakeBrokerServiceProduceProcedure is the fully-qualified name of the KrakeBrokerService's
	// Produce RPC.
	KrakeBrokerServiceProduceProcedure = "/krake.v1.KrakeBrokerService/Produce"
	// KrakeBrokerServiceRegisterConsumerProcedure is the fully-qualified name of the
	// KrakeBrokerService's RegisterConsumer RPC.
	KrakeBrokerServiceRegisterConsumerProcedure = "/krake.v1.KrakeBrokerService/RegisterConsumer"
	// KrakeBrokerServiceAddSubscriptionsProcedure is the fully-qualified name of the
	// KrakeBrokerService's AddSubscriptions RPC.
	KrakeBrokerServiceAddSubscriptionsProcedure = "/krake.v1.KrakeBrokerService/AddSubscriptions"
	// KrakeBrokerServiceReadMessageProcedure is the fully-qualified name of the KrakeBrokerService's
	// ReadMessage RPC.
	KrakeBrokerServiceReadMessageProcedure = "/krake.v1.KrakeBrokerService/ReadMessage"
)

// KrakeBrokerServiceClient is a client for the krake.v1.KrakeBrokerService service.
type KrakeBrokerServiceClient interface {
	Produce(context.Context, *connect_go.Request[v1.ProduceRequest]) (*connect_go.Response[v1.ProduceResponse], error)
	RegisterConsumer(context.Context, *connect_go.Request[v1.RegisterConsumerRequest]) (*connect_go.Response[v1.RegisterConsumerResponse], error)
	AddSubscriptions(context.Context, *connect_go.Request[v1.AddSubscriptionsRequest]) (*connect_go.Response[v1.AddSubscriptionsResponse], error)
	ReadMessage(context.Context, *connect_go.Request[v1.ReadMessageRequest]) (*connect_go.Response[v1.ReadMessageResponse], error)
}

// NewKrakeBrokerServiceClient constructs a client for the krake.v1.KrakeBrokerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKrakeBrokerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KrakeBrokerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &krakeBrokerServiceClient{
		produce: connect_go.NewClient[v1.ProduceRequest, v1.ProduceResponse](
			httpClient,
			baseURL+KrakeBrokerServiceProduceProcedure,
			opts...,
		),
		registerConsumer: connect_go.NewClient[v1.RegisterConsumerRequest, v1.RegisterConsumerResponse](
			httpClient,
			baseURL+KrakeBrokerServiceRegisterConsumerProcedure,
			opts...,
		),
		addSubscriptions: connect_go.NewClient[v1.AddSubscriptionsRequest, v1.AddSubscriptionsResponse](
			httpClient,
			baseURL+KrakeBrokerServiceAddSubscriptionsProcedure,
			opts...,
		),
		readMessage: connect_go.NewClient[v1.ReadMessageRequest, v1.ReadMessageResponse](
			httpClient,
			baseURL+KrakeBrokerServiceReadMessageProcedure,
			opts...,
		),
	}
}

// krakeBrokerServiceClient implements KrakeBrokerServiceClient.
type krakeBrokerServiceClient struct {
	produce          *connect_go.Client[v1.ProduceRequest, v1.ProduceResponse]
	registerConsumer *connect_go.Client[v1.RegisterConsumerRequest, v1.RegisterConsumerResponse]
	addSubscriptions *connect_go.Client[v1.AddSubscriptionsRequest, v1.AddSubscriptionsResponse]
	readMessage      *connect_go.Client[v1.ReadMessageRequest, v1.ReadMessageResponse]
}

// Produce calls krake.v1.KrakeBrokerService.Produce.
func (c *krakeBrokerServiceClient) Produce(ctx context.Context, req *connect_go.Request[v1.ProduceRequest]) (*connect_go.Response[v1.ProduceResponse], error) {
	return c.produce.CallUnary(ctx, req)
}

// RegisterConsumer calls krake.v1.KrakeBrokerService.RegisterConsumer.
func (c *krakeBrokerServiceClient) RegisterConsumer(ctx context.Context, req *connect_go.Request[v1.RegisterConsumerRequest]) (*connect_go.Response[v1.RegisterConsumerResponse], error) {
	return c.registerConsumer.CallUnary(ctx, req)
}

// AddSubscriptions calls krake.v1.KrakeBrokerService.AddSubscriptions.
func (c *krakeBrokerServiceClient) AddSubscriptions(ctx context.Context, req *connect_go.Request[v1.AddSubscriptionsRequest]) (*connect_go.Response[v1.AddSubscriptionsResponse], error) {
	return c.addSubscriptions.CallUnary(ctx, req)
}

// ReadMessage calls krake.v1.KrakeBrokerService.ReadMessage.
func (c *krakeBrokerServiceClient) ReadMessage(ctx context.Context, req *connect_go.Request[v1.ReadMessageRequest]) (*connect_go.Response[v1.ReadMessageResponse], error) {
	return c.readMessage.CallUnary(ctx, req)
}

// KrakeBrokerServiceHandler is an implementation of the krake.v1.KrakeBrokerService service.
type KrakeBrokerServiceHandler interface {
	Produce(context.Context, *connect_go.Request[v1.ProduceRequest]) (*connect_go.Response[v1.ProduceResponse], error)
	RegisterConsumer(context.Context, *connect_go.Request[v1.RegisterConsumerRequest]) (*connect_go.Response[v1.RegisterConsumerResponse], error)
	AddSubscriptions(context.Context, *connect_go.Request[v1.AddSubscriptionsRequest]) (*connect_go.Response[v1.AddSubscriptionsResponse], error)
	ReadMessage(context.Context, *connect_go.Request[v1.ReadMessageRequest]) (*connect_go.Response[v1.ReadMessageResponse], error)
}

// NewKrakeBrokerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKrakeBrokerServiceHandler(svc KrakeBrokerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(KrakeBrokerServiceProduceProcedure, connect_go.NewUnaryHandler(
		KrakeBrokerServiceProduceProcedure,
		svc.Produce,
		opts...,
	))
	mux.Handle(KrakeBrokerServiceRegisterConsumerProcedure, connect_go.NewUnaryHandler(
		KrakeBrokerServiceRegisterConsumerProcedure,
		svc.RegisterConsumer,
		opts...,
	))
	mux.Handle(KrakeBrokerServiceAddSubscriptionsProcedure, connect_go.NewUnaryHandler(
		KrakeBrokerServiceAddSubscriptionsProcedure,
		svc.AddSubscriptions,
		opts...,
	))
	mux.Handle(KrakeBrokerServiceReadMessageProcedure, connect_go.NewUnaryHandler(
		KrakeBrokerServiceReadMessageProcedure,
		svc.ReadMessage,
		opts...,
	))
	return "/krake.v1.KrakeBrokerService/", mux
}

// UnimplementedKrakeBrokerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKrakeBrokerServiceHandler struct{}

func (UnimplementedKrakeBrokerServiceHandler) Produce(context.Context, *connect_go.Request[v1.ProduceRequest]) (*connect_go.Response[v1.ProduceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("krake.v1.KrakeBrokerService.Produce is not implemented"))
}

func (UnimplementedKrakeBrokerServiceHandler) RegisterConsumer(context.Context, *connect_go.Request[v1.RegisterConsumerRequest]) (*connect_go.Response[v1.RegisterConsumerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("krake.v1.KrakeBrokerService.RegisterConsumer is not implemented"))
}

func (UnimplementedKrakeBrokerServiceHandler) AddSubscriptions(context.Context, *connect_go.Request[v1.AddSubscriptionsRequest]) (*connect_go.Response[v1.AddSubscriptionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("krake.v1.KrakeBrokerService.AddSubscriptions is not implemented"))
}

func (UnimplementedKrakeBrokerServiceHandler) ReadMessage(context.Context, *connect_go.Request[v1.ReadMessageRequest]) (*connect_go.Response[v1.ReadMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("krake.v1.KrakeBrokerService.ReadMessage is not implemented"))
}
